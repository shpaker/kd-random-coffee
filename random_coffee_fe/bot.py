import telebot
import config
from telebot import types
import random

bot = telebot.TeleBot(config.TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
STATE_INIT = 0
STATE_WAITING_NAME = 1
STATE_EMAIL_SENT = 2
STATE_WAITING_MODERATION = 3
STATE_ONBOARDING = 4
STATE_READY_STATUS = 5
STATE_CLUBS = 6
STATE_CREATE_MEETING = 7
MODER = "1990006956"
MODER_1 = "1583920568"

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_name = {}

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª—É–±–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_clubs = {}

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_ready_status = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_states[message.chat.id] = STATE_INIT

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_start = types.KeyboardButton("–ù–ê–ß–ê–¢–¨")
    keyboard.add(button_start)

    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", reply_markup=keyboard)

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == STATE_INIT)
def handle_start(message):
    if message.text == "–ù–ê–ß–ê–¢–¨":
        user_states[message.chat.id] = STATE_WAITING_NAME
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Random Coffee V1 Students Edition!\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–∞–º —Å–≤–æ—ë –∏–º—è.")
    else:
        bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ù–ê–ß–ê–¢–¨, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == STATE_WAITING_NAME)
def handle_name(message):
    name = message.text
    user_name[message.chat.id] = name
    user_states[message.chat.id] = STATE_EMAIL_SENT

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    bot.send_message(MODER, f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º: {name}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ.")

    bot.send_message(MODER_1, f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º: {name}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ.")

    bot.send_message(message.chat.id, f"üíå{name} –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –µ–≥–æ –æ–¥–æ–±—Ä–∏—Ç, —Ç—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == STATE_EMAIL_SENT)
def handle_moderation_approval(message):
    # –¢—É—Ç –∫–æ—Ä–æ—á–µ –±—É–¥–µ—Ç —Ä–æ—Ñ–ª –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä—É, –Ω–æ –ø–æ–∫–∞ —ç—Ç–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ 
    approval_status = random.choice(["approved", "declined"])  # –†–ê–ù–î–û–ú —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏

    if approval_status == "approved":
        user_states[message.chat.id] = STATE_ONBOARDING
        onboarding_messages = [
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Random Coffee! üéâ\n–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ!\n–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!",
            "–û—Ç–ª–∏—á–Ω–æ! üéâ\n–†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ Random Coffee!\n–î–∞–≤–∞–π —É–∑–Ω–∞–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á—à–µ!",
            "–£—Ä–∞! üéâ\n–¢—ã —Ç–µ–ø–µ—Ä—å —á–∞—Å—Ç—å Random Coffee!\n–î–∞–≤–∞–π —É–∑–Ω–∞–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á—à–µ!"
        ]
        bot.send_message(message.chat.id, random.choice(onboarding_messages))
        show_main_menu(message.chat.id)
    else:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

def show_main_menu(chat_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_ready = types.KeyboardButton("–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å")
    button_clubs = types.KeyboardButton("–ö–ª—É–±—ã")
    button_create_meeting = types.KeyboardButton("–ü–æ–¥–æ–±—Ä–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
    keyboard.add(button_ready)
    keyboard.add(button_clubs)
    keyboard.add(button_create_meeting)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=keyboard)

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == STATE_ONBOARDING)
def handle_onboarding(message):
    if message.text == "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å":
        user_states[message.chat.id] = STATE_READY_STATUS
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:", reply_markup=get_ready_status_keyboard())
    elif message.text == "–ö–ª—É–±—ã":
        user_states[message.chat.id] = STATE_CLUBS
        send_club_options(message.chat.id)
    elif message.text == "–ü–æ–¥–æ–±—Ä–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
        user_states[message.chat.id] = STATE_CREATE_MEETING
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—Å—Ç—Ä–µ—á–∏:", reply_markup=get_meeting_type_keyboard())

def get_ready_status_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    button_ready = types.InlineKeyboardButton("–ì–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é", callback_data="ready")
    button_not_ready = types.InlineKeyboardButton("–ù–µ –≥–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é", callback_data="not_ready")
    button_main_menu = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        
    keyboard.add(button_ready)
    keyboard.add(button_not_ready)
    keyboard.add(button_main_menu)
    
    return keyboard

def get_meeting_type_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    button_tet_a_tet = types.InlineKeyboardButton("Tet-a-tet", callback_data="tet_a_tet")
    button_group = types.InlineKeyboardButton("–ì—Ä—É–ø–ø–æ–≤–∞—è", callback_data="group")
    button_main_menu = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        
    keyboard.add(button_tet_a_tet)
    keyboard.add(button_group)
    keyboard.add(button_main_menu)
    
    return keyboard

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == STATE_READY_STATUS)
def handle_ready_status(message):
    pass

def send_club_options(chat_id):
    keyboard = types.InlineKeyboardMarkup()
    clubs = ["Dota 2", "CS2", "Genshin Impact", "HonkaiStarRail", "Tet-a-tet", "ZZZ", "Valorant", "Mobile Legends", "ToF", "WutheringWaves"]
    
    for club in clubs:
        keyboard.add(types.InlineKeyboardButton(club, callback_data=club))
    
    keyboard.add(types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –∫–ª—É–±:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    chat_id = call.message.chat.id
    if call.data in ["ready", "not_ready"]:
        status_message = "–í–∞—à —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: " + ("–ì–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é" if call.data == "ready" else "–ù–µ –≥–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é")
        bot.send_message(chat_id, status_message)
        
    elif call.data in ["Dota 2", "CS2", "Genshin Impact", "HonkaiStarRail", "Tet-a-tet", "ZZZ", "Valorant", "Mobile Legends", "ToF", "WutheringWaves"]:
        if chat_id not in user_clubs:
            user_clubs[chat_id] = []
        if call.data in user_clubs[chat_id]:
            user_clubs[chat_id].remove(call.data)
            bot.send_message(chat_id, f"–í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–ª—É–±–∞: {call.data}")
        else:
            user_clubs[chat_id].append(call.data)
            bot.send_message(chat_id, f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–ª—É–±—É: {call.data}")
        
    elif call.data == "main_menu":
        user_states[chat_id] = STATE_ONBOARDING 
        show_main_menu(chat_id)

    elif call.data in ["tet_a_tet", "group"]:
        user_states[chat_id] = STATE_CREATE_MEETING
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–± –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏:", reply_markup=get_club_keyboard())

def get_club_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    clubs = ["Dota 2", "CS2", "Genshin Impact", "HonkaiStarRail", "Tet-a-tet", "ZZZ", "Valorant", "Mobile Legends", "ToF", "WutheringWaves"]
    
    for club in clubs:
        keyboard.add(types.InlineKeyboardButton(club, callback_data=club))
    
    keyboard.add(types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    return keyboard

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling()