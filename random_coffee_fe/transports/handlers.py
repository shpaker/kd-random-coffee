from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message

import config
from aiogram import types
from intagrations.telegram import dp, bot
from models.user import UserStates
from services.user_service import (
    get_club_keyboard, send_welcome, handle_start, handle_name, handle_moderation_approval,
    show_main_menu, get_ready_status_keyboard, get_meeting_type_keyboard,
    handle_callback_query
)
from models.user import UserStates
from models.user_manager import UserManager

user_manager = UserManager()


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user = user_manager.get_user(message.chat.id)
    user.state = UserStates.INIT
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ù–ê–ß–ê–¢–¨"))
    await bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", reply_markup=keyboard)

@dp.message_handler(lambda message: user_manager.get_user(message.chat.id).state == UserStates.INIT)
async def handle_start_message(message: types.Message):
    if message.text == "–ù–ê–ß–ê–¢–¨":
        user = user_manager.get_user(message.chat.id)
        user.state = UserStates.WAITING_NAME
        await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Random Coffee V1 Students Edition! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è.")
        return
    else:
        await bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ù–ê–ß–ê–¢–¨, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")

@dp.message_handler(lambda message: user_manager.get_user(message.chat.id).state == UserStates.WAITING_NAME)
async def handle_name_message(message: types.Message):
    user = user_manager.get_user(message.chat.id)
    user.name = message.text
    user.state = UserStates.EMAIL_SENT
    await bot.send_message(message.chat.id, f"üíå{message.text} –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –µ–≥–æ –æ–¥–æ–±—Ä–∏—Ç, —Ç—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
    await bot.send_message(config.MODER, f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º: {message.text}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ.")
    await bot.send_message(config.MODER_1, f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º: {message.text}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ.")

@dp.message_handler(lambda message: user_manager.get_user(message.chat.id).state == UserStates.EMAIL_SENT)
async def handle_moderation_approval_message(message: types.Message):
    response, approved = await handle_moderation_approval(message.chat.id)
    await bot.send_message(message.chat.id, response)
    if approved:
        text, keyboard = await show_main_menu(message.chat.id)
        await bot.send_message(message.chat.id, text, reply_markup=keyboard)

@dp.message_handler(lambda message: user_manager.get_user(message.chat.id).state == UserStates.ONBOARDING)
async def handle_onboarding_message(message: types.Message):
    if message.text == "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å":
        user_manager.get_user(message.chat.id).state = UserStates.READY_STATUS
        await bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:", reply_markup=get_ready_status_keyboard())
    elif message.text == "–ö–ª—É–±—ã":
        user_manager.get_user(message.chat.id).state = UserStates.CLUBS
        await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –∫–ª—É–±:", reply_markup=get_club_keyboard())
    elif message.text == "–ü–æ–¥–æ–±—Ä–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
        user_manager.get_user(message.chat.id).state = UserStates.CREATE_MEETING
        await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—Å—Ç—Ä–µ—á–∏:", reply_markup=get_meeting_type_keyboard())

@dp.callback_query_handler(lambda call: True)
async def handle_callback(call: types.CallbackQuery):
    response = await handle_callback_query(call.data, call.message.chat.id)
    if isinstance(response, tuple):
        text, keyboard = response
        await bot.send_message(call.message.chat.id, text, reply_markup=keyboard)
    else:
        await bot.send_message(call.message.chat.id, response)

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
