from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types
from random_coffee_fe.models.user_manager import UserManager
from random_coffee_be.config import MODER, MODER_1, URL
from random_coffee_fe.models.user import UserStates, User
from random_coffee_fe.intagrations.telegram import dp, bot
import httpx
import logging
import random
from random_coffee_be.services.club_groups import club_groups

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

user_manager = UserManager()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
# async def notify_moderators(message):
#    await bot.send_message(MODER, message)
#    await bot.send_message(MODER_1, message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±—ç–∫–µ–Ω–¥—É
async def backend_request(method, url, json=None):
    async with httpx.AsyncClient() as client:
        try:
            if method == "GET":
                response = await client.get(url)
            elif method == "POST":
                response = await client.post(url, json=json)
            response.raise_for_status()
            return response.json()
        except httpx.HTTPError as e:
            logger.error(f"Backend request error: {e}")
            return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_welcome(chat_id):
    user = user_manager.get_user(chat_id)
    user.state = UserStates.INIT
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ù–ê–ß–ê–¢–¨"))
    return "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def handle_start(message_text, chat_id):
    user = user_manager.get_user(chat_id)
    if user.state == UserStates.INIT and message_text == "–ù–ê–ß–ê–¢–¨":
        user.state = UserStates.WAITING_NAME
        return "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Random Coffee V1 Students Edition! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è."
    else:
        return "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ù–ê–ß–ê–¢–¨, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_name(name, chat_id):
    user = user_manager.get_user(chat_id)
    user.name = name
    user.state = UserStates.EMAIL_SENT

    # –õ–æ–≥–∏—Ä—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info(f"New user registered: ID={chat_id}, Name={name}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        "id": chat_id,
        "username": name,
        "email": f"{chat_id}@example.com",
        "status": "pending",
        "availability_interval": "9-18",
        "approved_at": None,
        "is_new": True,
        "created_at": "2023-10-01T12:00:00"
    }
    response = await backend_request("POST", f"{URL}/user", json=user_data)
    if response:
        return f"üíå{name} –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –µ–≥–æ –æ–¥–æ–±—Ä–∏—Ç, —Ç—ã —Å–º–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è."
    else:
        return "–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
async def handle_moderation_approval(chat_id):
    user = user_manager.get_user(chat_id)
    approval_status = random.choice(["approved", "declined"])

    if approval_status == "approved":
        user.state = UserStates.ONBOARDING
        onboarding_messages = [
            "üèÜ–£—Ä–∞ –ø–æ–±–µ–¥–∞!\nüéâ–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏–ª —Ç–≤–æ—é –∑–∞—è–≤–∫—Éüéâ \n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Random Coffee!ü•∫\n–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ!\n–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!üëã",
            "üëå–û—Ç–ª–∏—á–Ω–æ!\nüéâ–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏–ª —Ç–≤–æ—é –∑–∞—è–≤–∫—Éüéâ \n–†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ Random Coffee!ü•∫\n–î–∞–≤–∞–π —É–∑–Ω–∞–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á—à–µ!üëã",
            "üòé–°–ª–∞–≤–Ω–æ!\nüéâ–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏–ª —Ç–≤–æ—é –∑–∞—è–≤–∫—Éüéâ\n–¢—ã —Ç–µ–ø–µ—Ä—å —á–∞—Å—Ç—å Random Coffee!ü•∫\n–î–∞–≤–∞–π —É–∑–Ω–∞–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á—à–µ!üëã"
        ]
        return random.choice(onboarding_messages), True
    else:
        return "ü•π–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É, —á—É—Ç—å —á—É—Ç—å –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ—â—ë –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µü•π", False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(chat_id):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å"))
    keyboard.add(KeyboardButton("üè† –ö–ª—É–±—ã"))
    keyboard.add(KeyboardButton("üë® –ü–æ–¥–æ–±—Ä–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"))
    return "üß∞ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
def get_ready_status_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é ‚úÖ", callback_data="ready"))
    keyboard.add(InlineKeyboardButton("‚ùå –ù–µ –≥–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é ‚ùå", callback_data="not_ready"))
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è", callback_data="main_menu"))
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–∏–ø–æ–≤ –≤—Å—Ç—Ä–µ—á
def get_meeting_type_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üí¨ Tet-a-tet üí¨", callback_data="Tet-a-tet"))
    keyboard.add(InlineKeyboardButton("üè† –ì—Ä—É–ø–ø–æ–≤–∞—è üè†", callback_data="group"))
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è", callback_data="main_menu"))
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–ª—É–±–æ–≤
def get_club_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º row_width=2 –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è 2 –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    clubs = [
        ("‚öîÔ∏è Dota 2 ‚öîÔ∏è", "Dota 2"),
        ("üî´ CS2 üî´", "CS2"),
        ("‚ú® Genshin Impact ‚ú®", "Genshin Impact"),
        ("üöÇ HonkaiStarRail üöÇ", "HonkaiStarRail"),
        ("üí¨ Tet-a-tet üí¨", "Tet-a-tet"),
        ("üì∫ ZZZ üì∫", "ZZZ"),
        ("üó° Valorant üó°", "Valorant"),
        ("ü§° Mobile Legends ü§°", "Mobile Legends"),
        ("üíø ToF üíø", "ToF"),
        ("üå† WutheringWaves üå†", "WutheringWaves")
    ]
    buttons = [InlineKeyboardButton(emoji, callback_data=club) for emoji, club in clubs]
    keyboard.add(*buttons)  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard.add(InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_callback_query(call_data, chat_id):
    user = user_manager.get_user(chat_id)
    if call_data in ["ready", "not_ready"]:
        user.ready_status = call_data == "ready"
        return "–í–∞—à —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: " + ("–ì–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é" if call_data == "ready" else "–ù–µ –≥–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é")
    elif call_data in ["Dota 2", "CS2", "Genshin Impact", "HonkaiStarRail", "Tet-a-tet", "ZZZ", "Valorant", "Mobile Legends", "ToF", "WutheringWaves"]:
        if call_data in user.clubs:
            user.clubs.remove(call_data)
            return f"–í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–ª—É–±–∞: {call_data}"
        else:
            user.clubs.append(call_data)
            invite_link = club_groups.get(call_data)
            if invite_link:
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ
                keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", url=invite_link))
                return f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–ª—É–±—É: {call_data}", keyboard
            else:
                return f"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–ª—É–±—É {call_data} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    elif call_data == "main_menu":
        user.state = UserStates.ONBOARDING
        return await show_main_menu(chat_id)
    elif call_data in ["Tet-a-tet", "group"]:
        user.state = UserStates.CREATE_MEETING
        return "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–± –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏: \n (üò¢—á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ —Å–Ω–∏–∑—É, –Ω–∞–∂–º–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüò¢)", get_club_keyboard()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user = user_manager.get_user(message.chat.id)
    user.state = UserStates.INIT
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ù–ê–ß–ê–¢–¨"))
    await bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ INIT
@dp.message_handler(lambda message: user_manager.get_user(message.chat.id).state == UserStates.INIT)
async def handle_start_message(message: types.Message):
    if message.text == "–ù–ê–ß–ê–¢–¨":
        user = user_manager.get_user(message.chat.id)
        user.state = UserStates.WAITING_NAME
        await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Random Coffee V1 Students Edition! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è.")
        return
    else:
        await bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ù–ê–ß–ê–¢–¨, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ WAITING_NAME
@dp.message_handler(lambda message: user_manager.get_user(message.chat.id).state == UserStates.WAITING_NAME)
async def handle_name_message(message: types.Message):
    response = await handle_name(message.text, message.chat.id)
    await bot.send_message(message.chat.id, response)
#    await notify_moderators(f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º: {message.text}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ EMAIL_SENT
@dp.message_handler(lambda message: user_manager.get_user(message.chat.id).state == UserStates.EMAIL_SENT)
async def handle_moderation_approval_message(message: types.Message):
    response, approved = await handle_moderation_approval(message.chat.id)
    await bot.send_message(message.chat.id, response)
    if approved:
        text, keyboard = await show_main_menu(message.chat.id)
        await bot.send_message(message.chat.id, text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ONBOARDING
@dp.message_handler(lambda message: user_manager.get_user(message.chat.id).state == UserStates.ONBOARDING)
async def handle_onboarding_message(message: types.Message):
    if message.text == "‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å":
        user_manager.get_user(message.chat.id).state = UserStates.READY_STATUS
        await bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å: \n (üò¢—á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ —Å–Ω–∏–∑—É, –Ω–∞–∂–º–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüò¢)", reply_markup=get_ready_status_keyboard())
    elif message.text == "üè† –ö–ª—É–±—ã":
        user_manager.get_user(message.chat.id).state = UserStates.CLUBS
        await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –∫–ª—É–±: \n (üò¢—á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ —Å–Ω–∏–∑—É, –Ω–∞–∂–º–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüò¢)", reply_markup=get_club_keyboard())
    elif message.text == "üë® –ü–æ–¥–æ–±—Ä–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
        user_manager.get_user(message.chat.id).state = UserStates.CREATE_MEETING
        await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—Å—Ç—Ä–µ—á–∏: \n (üò¢—á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ —Å–Ω–∏–∑—É, –Ω–∞–∂–º–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüò¢)", reply_markup=get_meeting_type_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query_handler(lambda call: True)
async def handle_callback(call: types.CallbackQuery):
    response = await handle_callback_query(call.data, call.message.chat.id)
    if isinstance(response, tuple):
        text, keyboard = response
        await bot.send_message(call.message.chat.id, text, reply_markup=keyboard)
    else:
        await bot.send_message(call.message.chat.id, response)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)

# –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –ø–∏—à–∏ –º–Ω–µ –≤ –ª—Å, —è –∏ –º–æ—è –∫–æ–º–∞–Ω–¥–∞ –±—É–¥—É—Ç —Ä–∞–¥—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å https://t.me/MeMnO228 –ª–∏–±–æ https://t.me/kzrxxxt